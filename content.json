{"meta":{"title":"BHK","subtitle":"","description":"","author":"linkfo","url":"https://linkfo.github.io","root":"/"},"pages":[{"title":"about","date":"2023-07-10T05:56:24.000Z","updated":"2023-07-10T05:56:24.214Z","comments":true,"path":"about/index.html","permalink":"https://linkfo.github.io/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2023-07-10T05:56:51.000Z","updated":"2023-07-20T07:22:12.220Z","comments":true,"path":"categories/index.html","permalink":"https://linkfo.github.io/categories/index.html","excerpt":"","text":""},{"title":"书单","date":"2023-07-10T04:51:50.038Z","updated":"2023-07-10T04:51:50.038Z","comments":false,"path":"books/index.html","permalink":"https://linkfo.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2023-07-10T04:51:50.039Z","updated":"2023-07-10T04:51:50.039Z","comments":true,"path":"links/index.html","permalink":"https://linkfo.github.io/links/index.html","excerpt":"","text":""},{"title":"list","date":"2023-07-10T05:57:02.000Z","updated":"2023-07-10T05:57:02.822Z","comments":true,"path":"list/index.html","permalink":"https://linkfo.github.io/list/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2023-07-20T07:22:05.184Z","updated":"2023-07-20T07:22:05.184Z","comments":false,"path":"repository/index.html","permalink":"https://linkfo.github.io/repository/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-07-10T05:56:38.000Z","updated":"2023-07-20T07:21:45.161Z","comments":true,"path":"tags/index.html","permalink":"https://linkfo.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"git add .，git add -A，git add -u，git add * 的区别与联系","slug":"git add 的区别与联系","date":"2023-07-20T07:06:33.000Z","updated":"2023-07-20T07:32:55.831Z","comments":true,"path":"2023/07/20/git add 的区别与联系/b9fb7e58920f.html","link":"","permalink":"https://linkfo.github.io/2023/07/20/git%20add%20%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E8%81%94%E7%B3%BB/b9fb7e58920f.html","excerpt":"为什么要做？","text":"这几个命令在不同版本的 Git 中稍有差异。 对于 Git Version 1.x： git add .：会将当前工作区中当前目录(包括子目录)下的所有新文件和对已有文件的改动提交至暂存区，但不包括被删除的文件。 git add -u：git add --update 的简写形式，它只会监控当前整个工作区中之前已被 add 的文件，即已被跟踪(tracked)的文件，也就是只会将当前整个工作区中被修改和被删除的文件提交至暂存区。而新文件因为未被跟踪(untracked)，所以不会被提交至暂存区。 git add -A：git add --all 的简写形式，它会将当前整个工作区中所有的文件改动提交至暂存区，包括新增、修改和被删除的文件，不受当前所在目录限制。 注意：你会看到有些文章说 git add -A 属于 git add . 和 git add -u 功能的合集，这是不对的。因为 git add . 只会提交当前目录(包括子目录)下的新文件和对已有文件的改动，而 git add -A 不受当前目录限制。也就是说，git add . 和 git add -u 功能的合集只能属于 git add -A 功能的子集。 总结详见下图： Git Version 1.x 新文件 被修改的文件 被删除的文件 是否受当前所在目录限制 说明 git add -A. ✅ ✅ ✅ ❌ 将当前整个工作区中所有的文件改动提交至暂存区，包括新增、修改和被删除的文件，不受当前所在目录限制 git add . ✅ ✅ ❌ ✅ 将当前工作区中当前目录(包括子目录)下的所有新文件和对已有文件的改动提交至暂存区，但不包括被删除的文件 git add -u. ❌ ✅ ✅ ❌ 将当前整个工作区中被修改和被删除的文件提交至暂存区。而新文件因为未被跟踪(untracked)，所以不会被提交至暂存区 对于 Git Version 2.x： 在 Git --version 2.x 中对 git add . 的功能做了改动，git add . 会提交当前工作区中当前目录(包括子目录)下所有的文件改动，不像在 Git --version 1.x 时那样不包括被删除的文件。 Git Version 2.x 中如果想在使用 git add . 时不提交被删除的文件，可以使用 git add --ignore-removal 加上匹配符 .，即 git add --ignore-removal .。 git add --ignore-removal 后的匹配符是可以更换的(但不能缺省)，例如 git add --ignore-removal -A 可以实现在 git add -A 时不提交被删除的文件。 有些文章说在 Git --version 2.x 中 git add . 和 git add -A 的功能变得完全相同，这是不对的。因为我们之前提到过，git add . 提交的文件改动受当前所在目录限制，它只会提交当前工作区中当前目录(包括子目录)下的文件改动，而 git add -A 不受当前所在目录的限制，提交的是当前整个工作区中所有的文件改动。 git add * git add * 表示添加当前目录(包括子目录)下的所有文件改动，但不包括文件名以 . 符号开头的文件的改动。这是 Shell 命令，git 只是接收文件列表。而 git add . 的功能与 git add * 基本相同，只是 git add . 会将文件名以 . 符号开头的文件的改动也提交至暂存区。 总结详见下图： 总结详见下图： Git Version 2.x 新文件 被修改的文件 被删除的文件 是否受当前所在目录限制 说明 git add -A ✅ ✅ ✅ ❌ 将当前整个工作区中所有的文件改动提交至暂存区，包括新增、修改和被删除的文件，不受当前所在目录限制 git add . ✅ ✅ ✅ ✅ 将当前工作区中当前目录(包括子目录)下的所有的文件改动提交至暂存区，包括新增、修改和被删除的文件 git add -u. ❌ ✅ ✅ ❌ 将当前整个工作区中被修改和被删除的文件提交至暂存区。而新文件因为未被跟踪(untracked)，所以不会被提交至暂存区 git add * ✅ ✅ ✅ ✅ 将当前工作区中当前目录(包括子目录)下的所有的文件改动提交至暂存区，包括新增、修改和被删除的文件，但不包括文件名以 . 符号开头的文件的改动","categories":[{"name":"Other","slug":"Other","permalink":"https://linkfo.github.io/categories/Other/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://linkfo.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"git","slug":"git","permalink":"https://linkfo.github.io/tags/git/"}]},{"title":"conda 笔记","slug":"conda 笔记","date":"2023-07-18T11:26:04.000Z","updated":"2023-07-20T08:45:40.565Z","comments":true,"path":"2023/07/18/conda 笔记/a55e79a55634.html","link":"","permalink":"https://linkfo.github.io/2023/07/18/conda%20%E7%AC%94%E8%AE%B0/a55e79a55634.html","excerpt":"为什么要做？","text":"conda conda命令的一些选项开关有两种指定方式，一种两个连接号“–”后跟选项名全程，一种是一个连接号“-”后跟简称。比如说&quot;-n&quot;和&quot;–name&quot;是等价的。但是要注意有些例外，比如说，“–version”对应的是“-V”（大写的V而不是小写的v） #查看conda版本 conda --version #查看conda的环境配置 conda config --show #设置镜像 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ #设置bioconda conda config --add channels bioconda conda config --add channels conda-forge #设置搜索时显示通道地址 conda config --set show_channel_urls yes #更新conda conda update conda 查询某个命令的帮助 conda create --help 管理环境 Anaconda有一个缺省的名为base的环境。Conda允许你创建相互隔离的独立环境，这些环境被称之为虚拟环境（Virtual Environment） 创建虚拟环境 conda create -n env_name python=3.8 创建python版本为3.8、名字为env_name的虚拟环境，env_name文件可以在Anaconda安装目录envs文件下找到 查看有哪些虚拟环境 conda env list conda info -e conda info --envs 所显示的列表中，前面带星号“*“的表示当前活动环境 激活虚拟环境 conda activate env_name 退出虚拟环境 conda activate conda deactivate 以上两条命令只中任一条都会让你回到base environment 删除虚拟环境 conda remove --name env_name --all 如果只删除虚拟环境中的某个或者某些包则是： conda remove --name env_name package_name 导出环境 #获得环境中的所有配置 conda env export --name myenv &gt; myenv.yml #重新还原环境 conda env create -f myenv.yml 包（Package）的管理 查询看当前环境中安装了哪些包 conda list conda search package_name 在当前（虚拟）环境中安装一个包： conda install package_name conda install numpy=0.20.3 conda update numpy 安装包的时候可以指定从哪个channel进行安装，比如说，以下命令表示不是从缺省通道，而是从conda_forge安装某个包。 conda install pkg_name -c conda_forge conda卸载包 conda uninstall package_name conda uninstall package_name --force 清理anaconda缓存 conda clean -p # 删除没有用的包 --packages conda clean -t # 删除tar打包 --tarballs conda clean -y -all # 删除所有的安装包及cache(索引缓存、锁定文件、未使用过的包和tar包) Python版本的管理 将版本变更到指定版本 conda install python=3.5 python --version conda update python conda install vs pip install conda可以管理非python包，pip只能管理python包 conda configuration conda的配置文件为&quot;.condarc&quot;，该文件在安装时不是缺省存在的。但是当你第一次运行conda config命令时它就被自动创建了。&quot;.condarc&quot;配置文件遵循简单的YAML语法。 .condarc文件位置 执行conda info Channel管理 追加conda-forge channel: conda config --add channels conda-forge 移除conda-forge channel: conda config --remove channels conda-forge 查询当前配置中包含哪些channels conda config --get channels public class Dog &#123; String breed; int size; String colour; int age; void eat() &#123; &#125; void run() &#123; &#125; void sleep()&#123; &#125; void name()&#123; &#125; &#125; &gt;&gt;&gt; thisset = set((&quot;Google&quot;, &quot;Runoob&quot;, &quot;Taobao&quot;)) &gt;&gt;&gt; thisset.add(&quot;Facebook&quot;) &gt;&gt;&gt; print(thisset) &#123;&#x27;Taobao&#x27;, &#x27;Facebook&#x27;, &#x27;Google&#x27;, &#x27;Runoob&#x27;&#125; if condition_1: statement_block_1 elif condition_2: statement_block_2 else: statement_block_3 //此声明声明了拥有3个成员的结构体，分别为整型的a，字符型的b和双精度的c //同时又声明了结构体变量s1 //这个结构体并没有标明其标签 struct &#123; int a; char b; double c; &#125; s1; //此声明声明了拥有3个成员的结构体，分别为整型的a，字符型的b和双精度的c //结构体的标签被命名为SIMPLE,没有声明变量 struct SIMPLE &#123; int a; char b; double c; &#125;; //用SIMPLE标签的结构体，另外声明了变量t1、t2、t3 struct SIMPLE t1, t2[20], *t3; //也可以用typedef创建新类型 typedef struct &#123; int a; char b; double c; &#125; Simple2; //现在可以用Simple2作为类型声明新的结构体变量 Simple2 u1, u2[20], *u3; function myFunction(x, y) &#123; y = y || 0; &#125; #include &lt;iostream&gt; using namespace std; int main() &#123; int number; cout &lt;&lt; &quot;输入一个整数: &quot;; cin &gt;&gt; number; cout &lt;&lt; &quot;输入的数字为: &quot; &lt;&lt; number; return 0; &#125; package main import &quot;fmt&quot; func main() &#123; // 字符串可以通过 `+` 连接。 fmt.Println(&quot;go&quot; + &quot;lang&quot;) // 整数和浮点数 fmt.Println(&quot;1+1 =&quot;, 1+1) fmt.Println(&quot;7.0/3.0 =&quot;, 7.0/3.0) // 布尔型，以及常见的布尔操作。 fmt.Println(true &amp;&amp; false) fmt.Println(true || false) fmt.Println(!true) &#125; .highlight::-webkit-scrollbar-thumb &#123; /*滚动条里面小方块*/ border-radius: 45px; /*background-color: #D62929;*/ background-color: #6f6969; background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.2) 12.5%, transparent 12.5%, transparent 25%, rgba(255, 255, 255, 0.2) 25%, rgba(255, 255, 255, 0.2) 37.5%, transparent 37.5%, transparent 50%, rgba(255, 255, 255, 0.2) 50%, rgba(255, 255, 255, 0.2) 62.5%, transparent 62.5%, transparent 75%, rgba(255, 255, 255, 0.2) 75%, rgba(255, 255, 255, 0.2) 87.5%, transparent 87.5%); .footer_copyright&#123; position: fixed; text-align: center; bottom: 10px; width: 100%; z-index: 999; left: 0; &#125; .highlight::-webkit-scrollbar &#123; /*滚动条整体样式*/ /*高宽分别对应横竖滚动条的尺寸*/ /*width: 10px;*/ height: 8px; &#125; .highlight::-webkit-scrollbar-thumb &#123; /*滚动条里面小方块*/ border-radius: 45px; /*background-color: #D62929;*/ background-color: #6f6969; background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.2) 12.5%, transparent 12.5%, transparent 25%, rgba(255, 255, 255, 0.2) 25%, rgba(255, 255, 255, 0.2) 37.5%, transparent 37.5%, transparent 50%, rgba(255, 255, 255, 0.2) 50%, rgba(255, 255, 255, 0.2) 62.5%, transparent 62.5%, transparent 75%, rgba(255, 255, 255, 0.2) 75%, rgba(255, 255, 255, 0.2) 87.5%, transparent 87.5%); &#125; &lt;% if(theme.beian) &#123; %&gt; &lt;div class=&quot;footer_copyright&quot;&gt; &lt;span&gt;&lt;a href=&#x27;https://beian.miit.gov.cn&#x27; target=&#x27;_blank&#x27;&gt;&lt;%- theme.beian %&gt;&lt;/a&gt;&lt;/span&gt; &lt;/div&gt; &lt;% &#125; %&gt; mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a INNER JOIN tcount_tbl b ON a.runoob_author = b.runoob_author; +-------------+-----------------+----------------+ | a.runoob_id | a.runoob_author | b.runoob_count | +-------------+-----------------+----------------+ | 1 | 菜鸟教程 | 10 | | 2 | 菜鸟教程 | 10 | | 3 | RUNOOB.COM | 20 | | 4 | RUNOOB.COM | 20 | +-------------+-----------------+----------------+ 4 rows in set (0.00 sec)","categories":[{"name":"工具","slug":"工具","permalink":"https://linkfo.github.io/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Anaconda","slug":"Anaconda","permalink":"https://linkfo.github.io/tags/Anaconda/"},{"name":"conda","slug":"conda","permalink":"https://linkfo.github.io/tags/conda/"},{"name":"工具","slug":"工具","permalink":"https://linkfo.github.io/tags/%E5%B7%A5%E5%85%B7/"}]}],"categories":[{"name":"Other","slug":"Other","permalink":"https://linkfo.github.io/categories/Other/"},{"name":"工具","slug":"工具","permalink":"https://linkfo.github.io/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://linkfo.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"git","slug":"git","permalink":"https://linkfo.github.io/tags/git/"},{"name":"Anaconda","slug":"Anaconda","permalink":"https://linkfo.github.io/tags/Anaconda/"},{"name":"conda","slug":"conda","permalink":"https://linkfo.github.io/tags/conda/"}]}